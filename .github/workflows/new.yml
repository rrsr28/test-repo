name: Weekly AI-Powered README Update
on:
  schedule:
    # Run every Monday at 2:15 AM UTC (avoids peak times)
    - cron: '30 0 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes'
        required: false
        default: false
        type: boolean

permissions:
  contents: write    # Required to push commits
  pull-requests: write  # Required if branch is protected
  actions: read

jobs:
  analyze-and-update:
    runs-on: ubuntu-latest
    concurrency:
      group: readme-update
      cancel-in-progress: true
    timeout-minutes: 30
    
    steps:
      # 1. Checkout repository with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for analysis
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # 2. Calculate weekly changes
      - name: Analyze weekly changes
        id: changes
        run: |
          # Get date one week ago
          LAST_WEEK=$(date -d '7 days ago' '+%Y-%m-%d')
          
          # Gather change statistics
          echo "Analyzing changes since $LAST_WEEK"
          
          # Count commits
          COMMIT_COUNT=$(git rev-list --count --since="$LAST_WEEK" HEAD)
          echo "commits=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          # Get changed files
          git diff --name-only HEAD "HEAD@{7 days ago}" > changed_files.txt
          FILE_COUNT=$(wc -l < changed_files.txt)
          echo "files=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          # Generate detailed diff for Claude
          git diff HEAD "HEAD@{7 days ago}" --output=weekly_changes.diff
          
          # Get commit messages for context
          git log --since="$LAST_WEEK" --pretty=format:"%h %s by %an" > recent_commits.txt
          
          # Identify main areas of change
          echo "Main areas changed:"
          git diff --stat HEAD "HEAD@{7 days ago}" | head -20
      
      # 3. Skip if no changes (unless forced)
      - name: Check if update needed
        if: steps.changes.outputs.commits == '0' && github.event.inputs.force_update != 'true'
        run: |
          echo "No commits in the last week. Skipping update."
          exit 0
      
      # 4. Use Claude Code to analyze changes and update README
      - name: Update README with Claude Code
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          anthropic_model: "claude-3-7-sonnet-20250219"
          timeout_minutes: 10
          allowed_tools: "View,Bash(git:*),Edit,Replace"
          prompt: |
            Analyze the code changes from the past week and update the README.md file intelligently.
            
            CONTEXT:
            - There were ${{ steps.changes.outputs.commits }} commits affecting ${{ steps.changes.outputs.files }} files
            - The detailed diff is in weekly_changes.diff
            - Recent commit messages are in recent_commits.txt
            - Changed files are listed in changed_files.txt
            
            INSTRUCTIONS:
            1. First, read the current README.md to understand its structure
            2. Analyze weekly_changes.diff to understand what changed
            3. Review recent_commits.txt for context
            4. Update ONLY the sections of README.md that need updates based on the changes:
               - If API endpoints changed, update the API documentation section
               - If dependencies changed, update installation instructions
               - If new features were added, update the features list
               - If usage changed, update usage examples
            5. Preserve all existing formatting, badges, and structure
            6. Add a "Last Updated" timestamp at the bottom if it doesn't exist
            7. Do NOT remove or modify sections unrelated to the weekly changes
            
            IMPORTANT:
            - Be selective - only update what actually changed
            - Maintain the existing tone and style of the README
            - Keep updates concise and relevant
            - If a section for weekly updates exists, update it with a summary
      
      # 5. Create a pull request if branch is protected
      - name: Create PR if branch protected
        if: github.event.repository.default_branch_protected
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: automated weekly README update"
          title: "Weekly README Update - ${{ steps.changes.outputs.commits }} commits analyzed"
          body: |
            ## ü§ñ Automated Weekly README Update
            
            This PR contains automated README updates based on the past week's changes:
            
            - **Commits analyzed**: ${{ steps.changes.outputs.commits }}
            - **Files changed**: ${{ steps.changes.outputs.files }}
            - **Analysis performed by**: Claude Code (claude-3-7-sonnet)
            
            ### What was updated:
            - Sections of the README that correspond to code changes
            - Last updated timestamp
            
            Please review the changes before merging.
          branch: auto/weekly-readme-update
          delete-branch: true
          labels: |
            documentation
            automated
      
      # 6. Direct commit if branch not protected
      - name: Commit changes directly
        if: '!github.event.repository.default_branch_protected'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Claude README Bot"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add README.md
            git commit -m "docs: automated weekly README update - analyzed ${{ steps.changes.outputs.commits }} commits [skip ci]"
            git push
            echo "‚úÖ README updated successfully"
          else
            echo "‚ÑπÔ∏è No changes to README needed"
          fi
