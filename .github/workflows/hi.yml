name: Claude README Sync (Scheduled Weekly)

on:
  schedule:
    # Runs at 12:30 PM IST every Monday (07:00 UTC, accounting for IST = UTC+5:30)
    - cron: '56 5 * * *'
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  readme-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history to analyze last 7 days
          ref: main  # Always start from main branch
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Analyze last 7 days of changes on main
        id: analyze-changes
        run: |
          echo "=== Analyzing changes from last 7 days on main branch ==="
          
          # Get the current main branch HEAD
          MAIN_SHA=$(git rev-parse HEAD)
          echo "Current main SHA: $MAIN_SHA"
          
          # Get commits from last 7 days on main branch
          SINCE_DATE=$(date -d '7 days ago' --iso-8601)
          echo "Checking changes since: $SINCE_DATE"
          
          # Get changed files in the last week on main branch
          echo "Files changed in last 7 days on main:"
          CHANGED_FILES=$(git log --since="$SINCE_DATE" --name-only --pretty=format: \
            | sort -u \
            | grep -v '^$' \
            | head -50)
          echo "$CHANGED_FILES"
          
          # Get commit count and summary from main branch
          RECENT_COMMITS=$(git log --since="$SINCE_DATE" --oneline)
          COMMIT_COUNT=$(echo "$RECENT_COMMITS" | grep -c . || echo "0")
          
          echo "=== Commits from last 7 days on main ($COMMIT_COUNT total) ==="
          echo "$RECENT_COMMITS"
          
          # Generate unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="readme-sync-weekly-${TIMESTAMP}"
          echo "Will create branch: $BRANCH_NAME"
          
          # Save to environment
          {
            echo "CHANGED_FILES<<EOF"
            echo "$CHANGED_FILES"
            echo "EOF"
            echo "COMMIT_COUNT=$COMMIT_COUNT"
            echo "SINCE_DATE=$SINCE_DATE"
            echo "BRANCH_NAME=$BRANCH_NAME"
            echo "MAIN_SHA=$MAIN_SHA"
          } >> $GITHUB_ENV
          
          # Check if we have changes to analyze
          if [ "$COMMIT_COUNT" -eq "0" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "No commits in the last 7 days on main branch"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Found $COMMIT_COUNT commits to analyze on main"
          fi

      - name: Sync README with Claude and Create PR
        if: steps.analyze-changes.outputs.skip != 'true'
        uses: anthropics/claude-code-base-action@beta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_SKIP_PERMISSIONS: "true"
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: "45"
          allowed_tools: "Bash(*),View,Edit,Write,GlobTool,GrepTool,BatchTool,LS,mcp__github__create_pull_request,mcp__github__get_repository_info,mcp__github__get_commit_details,mcp__github__get_file_content"
          prompt: |
            I need you to analyze the code changes from the last 7 days on the main branch, update the README.md file, and create a pull request for the documentation updates.
            
            **SCHEDULED WEEKLY README SYNC**
            - This is a scheduled job running every Monday at 12:30 PM IST
            - You are currently on the main branch at commit ${{ env.MAIN_SHA }}
            - Analyze the last 7 days of changes and update documentation accordingly
            - **IMPORTANT**: You have full bash permissions - no need to ask for permission
            
            Please follow these steps EXACTLY:
            
            **Step 1: Verify Clean State**
            1. Run `git log --oneline -5` to confirm you're on the main branch
            2. Run `git status` to verify clean working directory
            3. Run `git config --global user.name 'Claude Bot'`
            4. Run `git config --global user.email 'claude-bot@anthropic.com'`
                      
            **Step 2: Analyze Recent Changes on Main Branch**
            5. Run `git log --since='${{ env.SINCE_DATE }}' --oneline` to see commits from the last week
            6. Run `git log --since='${{ env.SINCE_DATE }}' --name-only --pretty=format: | sort -u | grep -v '^$'` to see which files changed
            7. Run `git log --since='${{ env.SINCE_DATE }}' --pretty=format:"%h %s" -n 20` to see recent commit messages
            8. Run `git diff HEAD~${{ env.COMMIT_COUNT }}..HEAD` to see actual code changes (if ${{ env.COMMIT_COUNT }} > 0)
            
            **Step 3: README Analysis & Update**
            9. Read and understand the current README.md content
            10. Analyze all the changes from the past 7 days to understand what functionality has been added, modified, or removed
            11. Create and switch to new branch: `git checkout -b ${{ env.BRANCH_NAME }}`
            12. Verify you're on the new branch: `git branch --show-current`
            13. Update the README.md to reflect these accumulated changes (maintain existing structure and tone)
            
            **Step 4: Commit ONLY README Changes**
            14. If you made changes to README.md:
                - Run `git add README.md` (ONLY add README.md)
                - Run `git status` to verify only README.md is staged
                - Run `git commit -m "docs: weekly README update - $(date +'%Y-%m-%d')
                
                Weekly sync reflecting recent changes merged to main:
                - [specific change 1]
                - [specific change 2]
                - [etc.]
                
                Analysis period: ${{ env.SINCE_DATE }} to now
                Commits analyzed: ${{ env.COMMIT_COUNT }}
                Scheduled run: Monday 12:30 PM IST"`
                - Run `git push --set-upstream origin ${{ env.BRANCH_NAME }}`
                - Run `echo "README updated, committed, and pushed successfully"`
            15. If no changes were needed:
                - Run `echo "No README updates required - documentation is current"`
                - SKIP the remaining steps
            
            **Step 5: Create Weekly Update Pull Request (only if changes were made)**
            16. **OPTION A - Use GitHub CLI (preferred):**
                ```bash
                export GH_TOKEN="${GITHUB_TOKEN}"
                gh pr create \
                  --title "üìù Weekly README Update - $(date +'%Y-%m-%d')" \
                  --body "## ü§ñ Automated Weekly README Update
                
                This PR contains README updates based on analysis of the last 7 days of changes merged to main.
                
                **Scheduled Run:** Monday, $(date +'%B %d, %Y at %H:%M UTC') (12:30 PM IST)
                
                **Analysis Period:** ${{ env.SINCE_DATE }} to now
                
                **Base Commit:** ${{ env.MAIN_SHA }}
                
                **Changes Analyzed:** ${{ env.COMMIT_COUNT }} commits on main branch
                
                ### What This PR Contains
                
                - ‚úÖ README.md updates only
                - ‚úÖ Based on changes merged to main in the last 7 days
                - ‚úÖ Maintains existing documentation structure and tone
                - ‚úÖ Weekly scheduled maintenance
                
                ### Recent Activity Reflected in README
                
                [List the specific changes found during analysis]
                
                ### Files Changed in Last 7 Days
                
                $(echo '${{ env.CHANGED_FILES }}' | sed 's/^/- /')
                
                ---
                
                *This is an automated weekly README sync. The PR is safe to merge and will keep documentation current with recent development activity.*" \
                  --base main \
                  --head ${{ env.BRANCH_NAME }} \
                  --label "documentation,automated,weekly-sync,readme-update"
                ```
            
            **OPTION B - If GitHub CLI fails, use MCP tools:**
                - Use `mcp__github__create_pull_request` as backup
                - Provide same title and body content
            
            **Context:**
            - Current main commit: ${{ env.MAIN_SHA }}
            - Analysis period: Last 7 days (since ${{ env.SINCE_DATE }})
            - Total commits on main: ${{ env.COMMIT_COUNT }}
            - New branch name: ${{ env.BRANCH_NAME }}
            - Execution time: Monday 12:30 PM IST (scheduled)
            - GitHub Token is available as $GITHUB_TOKEN environment variable

      - name: Handle no changes case
        if: steps.analyze-changes.outputs.skip == 'true'
        run: |
          echo "::notice title=No Changes Found::No commits found in the last 7 days that would require README updates."
          echo "The current README.md appears to be up to date with recent changes."
          echo ""
          echo "Analysis Details:"
          echo "- Current main commit: ${{ env.MAIN_SHA }}"
          echo "- Period: Last 7 days (since ${{ env.SINCE_DATE }})"
          echo "- Commits found: 0"
          echo "- Scheduled run: Monday 12:30 PM IST"

      - name: Summary Report
        if: always()
        run: |
          echo "::group::Weekly README Sync Summary"
          echo "Scheduled execution: Monday 12:30 PM IST"
          echo "Analysis period: ${{ env.SINCE_DATE }} to $(date --iso-8601)"
          echo "Main branch commit: ${{ env.MAIN_SHA }}"
          echo "Commits analyzed: ${{ env.COMMIT_COUNT }}"
          echo "Changes required: ${{ steps.analyze-changes.outputs.skip != 'true' && 'Yes' || 'No' }}"
          if [ "${{ steps.analyze-changes.outputs.skip }}" != "true" ]; then
            echo "Branch created: ${{ env.BRANCH_NAME }}"
          fi
          echo "::endgroup::"
